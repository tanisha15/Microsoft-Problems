Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], 
then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:

-231 <= x <= 231 - 1

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

class Solution {
    public int reverse(int x) {
        long a = x;
        long rev=0;
        while(a!=0){
            long d=a%10;
            rev=(rev*10)+d;
            a=a/10;
        }

         if ((rev<-2147483648) || (rev>2147483647)){        
            return 0;
        } 
        return (int)rev;
    }
}


Approach:

1. first convert the int number to long because only then we can verify the signed 32 bit condition
2. Then check all the values with long including reverse
3. return the int reversed value
4. Only reverse value is checked with condition -> read the question properly



